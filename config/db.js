// =============================================================
// üì¶ SQL Server Connection (MSSQL + dotenv)
// -------------------------------------------------------------
// ‚úÖ H·ªó tr·ª£ c·∫£ instance (SQLEXPRESS) l·∫´n c·ªïng (1433)
// ‚úÖ C·∫•u tr√∫c an to√†n: Singleton Connection Pool
// ‚úÖ T·ª± ƒë·ªông reconnect n·∫øu m·∫•t k·∫øt n·ªëi
// ‚úÖ Log chi ti·∫øt, ph√π h·ª£p cho m√¥i tr∆∞·ªùng Production
// =============================================================

require("dotenv").config();
const sql = require("mssql");

// =============================================================
// üß≠ Load & Chu·∫©n h√≥a ENV
// =============================================================
const DB_SERVER = process.env.DB_SERVER?.trim() || "localhost\\SQLEXPRESS";
const DB_NAME = process.env.DB_NAME?.trim() || "PhucLongCNPMNC";
const DB_USER = process.env.DB_USER?.trim() || "phuclong_user";
const DB_PASSWORD = process.env.DB_PASSWORD?.trim() || "phuclong_pass";
const DB_PORT = process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 1433;
const DB_INSTANCE = process.env.DB_INSTANCE?.trim() || null;

// =============================================================
// ‚öôÔ∏è Build config ƒë·ªông (instance / port)
// =============================================================
const config = {
  user: DB_USER,
  password: DB_PASSWORD,
  server: DB_SERVER,
  database: DB_NAME,
  pool: {
    max: 10, // s·ªë connection t·ªëi ƒëa
    min: 1,
    idleTimeoutMillis: 30000,
  },
  options: {
    encrypt: false, // local: false; azure: true
    trustServerCertificate: true,
  },
};

// Instance name ‚Üí override port
if (DB_SERVER.includes("\\")) {
  delete config.port;
} else if (DB_INSTANCE) {
  config.options.instanceName = DB_INSTANCE;
  delete config.port;
} else {
  config.port = DB_PORT;
}

// =============================================================
// üß© Logging C·∫•u h√¨nh (·∫©n m·∫≠t kh·∫©u)
// =============================================================
console.log("üõ†Ô∏è SQL Config:", {
  server: config.server,
  instance: DB_INSTANCE || "(none)",
  database: config.database,
  user: config.user,
  port: config.port || "(instance mode)",
});

// =============================================================
// üîÅ Singleton Connection Pool
// =============================================================
let pool; // gi·ªØ k·∫øt n·ªëi duy nh·∫•t trong to√†n h·ªá th·ªëng
let isConnecting = false;

// ‚úÖ H√†m ch√≠nh ƒë·ªÉ l·∫•y pool (d√πng cho m·ªçi service)
async function getPool() {
  if (pool) return pool; // n·∫øu ƒë√£ k·∫øt n·ªëi ‚Üí d√πng l·∫°i
  if (isConnecting) {
    // ƒë·ª£i n·∫øu ƒëang trong qu√° tr√¨nh connect
    await new Promise((resolve) => setTimeout(resolve, 300));
    return getPool();
  }

  try {
    isConnecting = true;
    pool = await new sql.ConnectionPool(config).connect();
    console.log("‚úÖ SQL Server: k·∫øt n·ªëi th√†nh c√¥ng!");
    isConnecting = false;

    // N·∫øu c√≥ s·ª± c·ªë k·∫øt n·ªëi ‚Üí t·ª± reset
    pool.on("error", (err) => {
      console.error("‚ö†Ô∏è SQL Pool error:", err);
      pool = null;
    });

    return pool;
  } catch (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi SQL Server:", err.message);
    isConnecting = false;
    throw err;
  }
}

// =============================================================
// üß† Health Check ti·ªán √≠ch (optional)
// =============================================================
async function testConnection() {
  try {
    const pool = await getPool();
    const result = await pool.request().query("SELECT GETDATE() AS ServerTime");
    console.log("üß† SQL Health Check:", result.recordset[0]);
  } catch (err) {
    console.error("‚ùå SQL Health Check Failed:", err.message);
  }
}

// testConnection(); // b·∫≠t n·∫øu mu·ªën ki·ªÉm tra l√∫c kh·ªüi ƒë·ªông

// =============================================================
// üì§ Export module
// =============================================================
module.exports = {
  sql,
  getPool,
};
