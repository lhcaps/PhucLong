// src/services/auth.service.js
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { v4: uuidv4 } = require("uuid");
const dayjs = require("dayjs");
const { sql, getPool } = require("../config/db");
const UserModel = require("../models/user.model");
const EmailService = require("./email.service");
const TokenService = require("./token.service");

const JWT_SECRET = process.env.JWT_SECRET || "fallback_secret";

class AuthService {
  // ======================
  // 1Ô∏è‚É£ ƒêƒÇNG K√ù T√ÄI KHO·∫¢N
  // ======================
  static async register({ Name, Email, Phone, Password }) {
    const existing = await UserModel.findByEmail(Email);
    if (existing) throw new Error("Email ƒë√£ t·ªìn t·∫°i");

    const hash = await bcrypt.hash(Password, 10);
    const verifyToken = uuidv4();
    const expires = dayjs().add(30, "minute").toDate();

    await UserModel.create({
      Name,
      Email,
      Phone,
      PasswordHash: hash,
      VerifyToken: verifyToken,
      VerifyTokenExpires: expires,
    });

    const verifyUrl = `${process.env.BACKEND_URL}/api/auth/verify-email?token=${verifyToken}`;
    try {
      await EmailService.sendVerificationEmail(Email, Name, verifyUrl);
    } catch (err) {
      console.error("‚ùå G·ª≠i email x√°c minh th·∫•t b·∫°i:", err.message);
    }

    return "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n";
  }

  // ======================
  // 2Ô∏è‚É£ X√ÅC NH·∫¨N EMAIL
  // ======================
  static async verifyEmail(token) {
    const user = await UserModel.verifyAccount(token);
    if (!user) throw new Error("Li√™n k·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    return { message: "K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng" };
  }

  // ======================
  // 3Ô∏è‚É£ ƒêƒÇNG NH·∫¨P
  // ======================
  static async login({ Email, Password }) {
    const user = await UserModel.findByEmail(Email);
    if (!user) throw new Error("Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω");
    if (!user.IsVerified) throw new Error("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t");

    const match = await bcrypt.compare(Password, user.PasswordHash);
    if (!match) throw new Error("Sai m·∫≠t kh·∫©u");

    const accessToken = await TokenService.signAccessToken({
      userId: user.Id,
      role: user.Role,
      email: user.Email,
    });
    const refreshToken = await TokenService.generateRefreshToken(user.Id);

    return {
      user: {
        id: user.Id,
        name: user.Name,
        email: user.Email,
        role: user.Role,
      },
      accessToken,
      refreshToken,
    };
  }

  // ======================
  // 4Ô∏è‚É£ QU√äN M·∫¨T KH·∫®U
  // ======================
  static async forgotPassword(email) {
    const user = await UserModel.findByEmail(email);
    if (!user) return "N·∫øu email h·ª£p l·ªá, h∆∞·ªõng d·∫´n ƒë√£ ƒë∆∞·ª£c g·ª≠i";

    // T·∫°o token & hash ƒë·ªÉ l∆∞u v√†o DB
    const rawToken = uuidv4();
    const hashedToken = await bcrypt.hash(rawToken, 10);
    const expires = dayjs().add(15, "minute").toDate();

    const pool = await getPool();
    await pool
      .request()
      .input("Id", sql.Int, user.Id)
      .input("ResetToken", sql.NVarChar, hashedToken)
      .input("ResetTokenExpires", sql.DateTime2, expires)
      .query(`
        UPDATE Users 
        SET ResetToken=@ResetToken, ResetTokenExpires=@ResetTokenExpires
        WHERE Id=@Id
      `);

    const resetUrl = `${process.env.FRONTEND_URL}/reset-password/${rawToken}`;
    try {
      await EmailService.sendResetPasswordEmail(user.Email, user.Name, resetUrl);
      console.log("üìß ƒê√£ g·ª≠i mail reset t·ªõi:", user.Email);
    } catch (err) {
      console.error("‚ùå G·ª≠i email reset th·∫•t b·∫°i:", err.message);
    }

    return "N·∫øu email h·ª£p l·ªá, h∆∞·ªõng d·∫´n ƒë√£ ƒë∆∞·ª£c g·ª≠i";
  }

  // ======================
  // 5Ô∏è‚É£ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
  // ======================
  static async resetPassword(token, newPassword) {
    const pool = await getPool();
    const now = new Date();

    // L·∫•y t·∫•t c·∫£ user c√≥ token ch∆∞a h·∫øt h·∫°n
    const users = await pool
      .request()
      .input("Now", sql.DateTime2, now)
      .query("SELECT * FROM Users WHERE ResetTokenExpires >= @Now");

    let matchedUser = null;
    for (const u of users.recordset) {
      const ok = await bcrypt.compare(token, u.ResetToken || "");
      if (ok) {
        matchedUser = u;
        break;
      }
    }

    if (!matchedUser)
      throw new Error("Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");

    const hash = await bcrypt.hash(newPassword, 10);
    await pool
      .request()
      .input("Id", sql.Int, matchedUser.Id)
      .input("PasswordHash", sql.NVarChar, hash)
      .query(`
        UPDATE Users
        SET PasswordHash=@PasswordHash,
            ResetToken=NULL,
            ResetTokenExpires=NULL
        WHERE Id=@Id
      `);

    return "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng";
  }

  // ======================
  // 6Ô∏è‚É£ L√ÄM M·ªöI TOKEN
  // ======================
  static async refreshToken(refreshToken) {
    const userId = await TokenService.verifyRefreshToken(refreshToken);
    const accessToken = await TokenService.signAccessToken({ userId });
    return { accessToken };
  }

  // ======================
  // 7Ô∏è‚É£ ƒêƒÇNG XU·∫§T
  // ======================
  static async revokeRefreshToken(refreshToken) {
    await TokenService.revokeRefreshToken(refreshToken);
  }

  // ======================
  // 8Ô∏è‚É£ L·∫§Y TH√îNG TIN PROFILE
  // ======================
  static async getProfile(userId) {
    const user = await UserModel.findById(userId);
    if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
    delete user.PasswordHash;
    return user;
  }

  // ======================
  // 9Ô∏è‚É£ C·∫¨P NH·∫¨T PROFILE
  // ======================
  static async updateProfile(userId, { Name, Phone }) {
    const pool = await getPool();
    await pool
      .request()
      .input("Id", sql.Int, userId)
      .input("Name", sql.NVarChar, Name)
      .input("Phone", sql.NVarChar, Phone)
      .query("UPDATE Users SET Name=@Name, Phone=@Phone WHERE Id=@Id");

    return "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng";
  }

  // ======================
  // üîü ƒê·ªîI M·∫¨T KH·∫®U
  // ======================
  static async changePassword(userId, oldPassword, newPassword) {
    const user = await UserModel.findById(userId);
    if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

    const match = await bcrypt.compare(oldPassword, user.PasswordHash);
    if (!match) throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");

    const hash = await bcrypt.hash(newPassword, 10);
    const pool = await getPool();
    await pool
      .request()
      .input("Id", sql.Int, userId)
      .input("PasswordHash", sql.NVarChar, hash)
      .query("UPDATE Users SET PasswordHash=@PasswordHash WHERE Id=@Id");

    return "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng";
  }
}

module.exports = AuthService;
