const { sql, poolPromise } = require("../../config/db");

class AdminProductService {
  // L·∫•y danh s√°ch s·∫£n ph·∫©m
  static async getAll() {
    const pool = await getPool();
    const res = await pool.request()
      .query("SELECT Id, Name, Price, Stock, CategoryId, ImageUrl FROM Products ORDER BY CreatedAt DESC");
    return res.recordset;
  }

  // L·∫•y chi ti·∫øt s·∫£n ph·∫©m
  static async getById(id) {
    const pool = await getPool();
    const res = await pool.request().input("Id", sql.Int, id)
      .query("SELECT * FROM Products WHERE Id=@Id");
    if (!res.recordset.length) throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
    return res.recordset[0];
  }

  // T·∫°o s·∫£n ph·∫©m
  static async create({ Name, Description, Price, Stock, CategoryId, ImageUrl }) {
    const pool = await getPool();
    await pool.request()
      .input("Name", sql.NVarChar, Name)
      .input("Description", sql.NVarChar, Description)
      .input("Price", sql.Decimal(18, 2), Price)
      .input("Stock", sql.Int, Stock)
      .input("CategoryId", sql.Int, CategoryId)
      .input("ImageUrl", sql.NVarChar, ImageUrl)
      .query(`
        INSERT INTO Products (Name, Description, Price, Stock, CategoryId, ImageUrl)
        VALUES (@Name, @Description, @Price, @Stock, @CategoryId, @ImageUrl)
      `);
    return { message: "‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi" };
  }

  // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  static async update(id, { Name, Description, Price, Stock, CategoryId, ImageUrl }) {
    const pool = await getPool();
    await pool.request()
      .input("Id", sql.Int, id)
      .input("Name", sql.NVarChar, Name)
      .input("Description", sql.NVarChar, Description)
      .input("Price", sql.Decimal(18, 2), Price)
      .input("Stock", sql.Int, Stock)
      .input("CategoryId", sql.Int, CategoryId)
      .input("ImageUrl", sql.NVarChar, ImageUrl)
      .query(`
        UPDATE Products
        SET Name=@Name, Description=@Description, Price=@Price, Stock=@Stock,
            CategoryId=@CategoryId, ImageUrl=@ImageUrl
        WHERE Id=@Id
      `);
    return { message: "‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng" };
  }

  // X√≥a s·∫£n ph·∫©m
  static async delete(id) {
    const pool = await getPool();
    await pool.request().input("Id", sql.Int, id)
      .query("DELETE FROM Products WHERE Id=@Id");
    return { message: "üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m" };
  }
}

module.exports = AdminProductService;
